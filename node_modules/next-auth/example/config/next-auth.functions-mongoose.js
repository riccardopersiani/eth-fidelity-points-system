/**
 * next-auth.functions.js Example for Mongoose 5.0
 *
 * This alternate functions file is designed for Mongoose. You can use this 
 * instead of the default example (which uses the Mongo DB driver), or as a
 * guide for writing a connector for different database.
 *
 * Environment variables for this example:
 *
 * MONGO_URI=mongodb://localhost:27017/my-database
 * EMAIL_FROM=username@gmail.com
 * EMAIL_SERVER=smtp.gmail.com
 * EMAIL_PORT=465
 * EMAIL_USERNAME=username@gmail.com
 * EMAIL_PASSWORD=p4ssw0rd
 *
 * If you wish, you can put these in a `.env` to seperate your environment 
 * specific configuration from your code.
 **/

// Load environment variables from a .env file if one exists
require('dotenv').load()

const mongoose = require('mongoose')
const ObjectId = mongoose.Types.ObjectId

// Connect to MongoDB with Mongoose
mongoose.connect(process.env.MONGO_URI)

// Define User Schema
// You will probably want to refactor this out (e.g. to `./models/User.js')
const UserSchema = new mongoose.Schema({
  _id          : { type: mongoose.Schema.Types.ObjectId, index: true },
  name         : String,
  email        : { type: String, index: true },
  admin        : Boolean,
  // Properties emailToken and emailVerified are required for email auth.
  emailToken   : String,
  emailVerified: Boolean,
  // If using oAuth be sure to add add an Object for each oAuth provider.
  // These should match the provider name in lower case e.g. 'Google'->'google'
  // These will be used to store { id, accessToken, refreshToken } if provided.
  facebook     : Object,
  google       : Object,
  twitter      : Object
})
const User = mongoose.model('User', UserSchema)

// Use Node Mailer for email sign in
const nodemailer = require('nodemailer')
const nodemailerSmtpTransport = require('nodemailer-smtp-transport')
const nodemailerDirectTransport = require('nodemailer-direct-transport')

// Send email direct from localhost if no mail server configured
let nodemailerTransport = nodemailerDirectTransport()
if (process.env.EMAIL_SERVER && process.env.EMAIL_USERNAME && process.env.EMAIL_PASSWORD) {
  nodemailerTransport = nodemailerSmtpTransport({
    host: process.env.EMAIL_SERVER,
    port: process.env.EMAIL_PORT || 25,
    secure: true,
    auth: {
      user: process.env.EMAIL_USERNAME,
      pass: process.env.EMAIL_PASSWORD
    }
  })
}

module.exports = () => {
  return Promise.resolve({
    // If a user is not found find() should return null (with no error).
    find: ({id, email, emailToken, provider} = {}) => {
      let query = {}

      // Find needs to support looking up a user by ID, Email, Email Token,
      // and Provider Name + Users ID for that Provider
      if (id) {
        query = { _id: ObjectId(id) }
      } else if (email) {
        query = { email: email }
      } else if (emailToken) {
        query = { emailToken: emailToken }
      } else if (provider) {
        query = { [`${provider.name}.id`]: provider.id }
      }

      return new Promise((resolve, reject) => {
        User.findOne(query, (err, user) => {
          if (err) return reject(err)
          return resolve(user)
        })
      })
    },
    // The user parameter contains a basic user object to be added to the DB.
    // The oAuthProfile parameter is passed when signing in via oAuth.
    //
    // The optional oAuthProfile parameter contains all properties associated
    // with the users account on the oAuth service they are signing in with.
    //
    // You can use this to capture profile.avatar, profile.location, etc.
    insert: (user, oAuthProfile) => {
      return new Promise((resolve, reject) => {
        User.create(user, (err, response) => {
          if (err) return reject(err)
          return resolve(user)
        })
      })
    },
    // The user parameter contains a basic user object to be added to the DB.
    // The oAuthProfile parameter is passed when signing in via oAuth.
    //
    // The optional oAuthProfile parameter contains all properties associated
    // with the users account on the oAuth service they are signing in with.
    //
    // You can use this to capture profile.avatar, profile.location, etc.
    update: (user, profile, options) => {
      return new Promise((resolve, reject) => {
        User.update({_id: ObjectId(user._id)}, user, {}, err => {
          if (err) return reject(err)

          // Unset field if emailToken invalidated or oAUth provider unlinked
          if (options && options.delete) user[options.delete] = undefined

          return user.save(() => {
            return resolve(user)
          })
        })
      })
    },
    // The remove parameter is passed the ID of a user account to delete.
    //
    // This method is not used in the current version of next-auth but will
    // be in a future release, to provide an endpoint for account deletion.
    remove: (id) => {
      return new Promise((resolve, reject) => {
        User.remove({_id: ObjectId(id)}, (err) => {
          if (err) return reject(err)
          return resolve(true)
        })
      })
    },
    // Seralize turns the value of the ID key from a User object
    serialize: (user) => {
      // Supports serialization from Mongo Object *and* deserialize() object
      if (user.id) {
        // Handle responses from deserialize()
        return Promise.resolve(user.id)
      } else if (user._id) {
        // Handle responses from find(), insert(), update()
        return Promise.resolve(user._id)
      } else {
        return Promise.reject(new Error("Unable to serialise user"))
      }
    },
    // Deseralize turns a User ID into a normalized User object that is
    // exported to clients. It should not return private/sensitive fields,
    // only fields you want to expose via the user interface.
    deserialize: (id) => {
      return new Promise((resolve, reject) => {
        User.findOne({ _id: ObjectId(id) }, (err, user) => {
          if (err) return reject(err)
            
          // If user not found (e.g. account deleted) return null object
          if (!user) return resolve(null)
            
          return resolve({
            id: user._id,
            name: user.name,
            email: user.email,
            emailVerified: user.emailVerified,
            admin: user.admin || false
          })
        })
      })
    },
    // Email Sign In
    //
    // Accounts are created automatically, as when signing in via oAuth.
    // Users are sent one-time use sign in tokens in links. This avoids
    // storing user supplied passwords anywhere, preventing password re-use.
    //
    // To disable this option, do not set sendSignInEmail (or set it to null).
    sendSignInEmail: ({email, url, req}) => {
      nodemailer
      .createTransport(nodemailerTransport)
      .sendMail({
        to: email,
        from: process.env.EMAIL_FROM,
        subject: 'Sign in link',
        text: `Use the link below to sign in:\n\n${url}\n\n`,
        html: `<p>Use the link below to sign in:</p><p>${url}</p>`
      }, (err) => {
        if (err) {
          console.error('Error sending email to ' + email, err)
        }
      })
      if (process.env.NODE_ENV === 'development')  {
        console.log('Generated sign in link ' + url + ' for ' + email)
      }
    }
  })
}